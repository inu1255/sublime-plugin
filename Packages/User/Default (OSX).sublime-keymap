[
    // Auto-pair single quotes
    { "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0`"}, "context": [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[`a-zA-Z0-9_]$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
        ]
    },
    { "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}`"}, "context": [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
        ]
    },
    { "keys": ["`"], "command": "move", "args": {"by": "characters", "forward": true}, "context": [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
        ]
    },
    {
        "keys": ["super+e"], "command": "run_emmet_action", "args": {"action": "expand_abbreviation"}, "context": [
            {"key": "selector", "operator": "equal", "operand": "source.js"},
            {"key": "emmet_action_enabled.expand_abbreviation"}
        ]
    },
    {
        "keys": ["tab"], "command": "expand_abbreviation_by_tab", "context": [
            {"key": "selector","operand": "source.js", "operator": "equal", "match_all": true},
            {"key": "preceding_text", "operator": "regex_contains", "operand": "(\\b(a\\b|div|span|p\\b|button)(\\.\\w*|>\\w*)?([^}]*?}$)?)", "match_all": true },
            {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
        ]
    },
    {
        "keys": ["super+shift+space"], "command": "expand_region"
    },
    {
        "keys": ["super+shift+n"], "command": "advanced_new_file_new"
    },
    {
        "keys": ["f2"], "command": "advanced_new_file_move"
    },
    {
        "keys": ["super+alt+tab"], "command": "alignment"
    },
    // go
    {
        "keys": ["super+.", "super+g"], "command": "godef","context":[
            {"key": "selector","operand": "source.go", "operator": "equal", "match_all": true},
        ]
    },
    {
        "keys": ["super+.", "super+i"], "command": "go_go_install","context":[
            {"key": "selector","operand": "source.go", "operator": "equal", "match_all": true},
        ]
    },
    // python
    {
        "keys": ["super+.", "super+g"], "command": "sublime_jedi_goto","context":[
            {"key": "selector","operand": "source.python", "operator": "equal", "match_all": true},
        ]
    },
    {
        "keys": ["super+.", "super+f"], "command": "sublime_jedi_find_usages","context":[
            {"key": "selector","operand": "source.python", "operator": "equal", "match_all": true},
        ]
    },
    // c++
    {
        "keys": ["super+.", "super+g"], "command": "clang_goto_def","context":[
            {"key": "selector","operand": "source.c++", "operator": "equal"},
        ]
    },
    {
        "keys": ["super+.", "super+e"], "command": "select_exec"
    }
]